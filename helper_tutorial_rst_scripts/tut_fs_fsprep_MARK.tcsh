#!/bin/tcsh

#:TITLE: How to use FS recon-all with AFNI

cat << TEXTINTRO

.. comment on creation of this script
   This script was generated from running:
     afni_doc/helper_tutorial_rst_scripts/tut_fs_fsprep_MARK.tcsh
   as described in the _README.txt in that same directory.

FreeSurfer (FS) provides a number of useful tools for brain imaging.
In particular, the parcellation/segmentations and anatomical surfaces
generated by ``recon-all`` can be used in lots of applications.
However, we have noticed that some basic dataset properties can affect
the output results is surprising ways: namely, FS outputs won't align
well with FS inputs, and some internal structures may appear odd.

It appears that there can be something like a 1/2 voxel shift between
the input and output volumes (perhaps due to nearest neighbor
interpolation), depending on the input grid.  This can result in a
slight misalignment of the anatomical parcellation with the *input*
volume (though it should align well with the T1 *output*), and/or
distort measurements of depth/thickness/volume across a surface.
Images of the "before" and "after" datasets show this behavior, below.

Here we describe a few considerations for preparing to use FS's
``recon-all``, and in particular a helpful program in AFNI to
check+adjust the properties of your anatomical before running FS
(called ``check_dset_for_fs.py``).  Some of these items might even
inform your acquisition paradigms for anatomical volumes.

These considerations are borne out of experience in processing the
datasets and in integrating them into the AFNI/SUMA flow.  This is
*not* a FS help page---all queries about using those tools should go
to their authors.  Here, we have been using FS ver=6.0.0.

TEXTINTRO

#:SECTION: Surprising requirements for T1w input to FS's recon-all

cat << TEXTBLOCK

There are a number of properties that the T1w volume input to FS's
``recon-all`` appear to **need** to have to ensure that the output
datasets and surfaces align well with the input volume.  To date,
these include:

* having a FOV matrix with even numbers of voxels in each direction
  (e.g., 256x256x174 matrix, not a 256x256x173 one);

* having isotropic voxels (voxel edge lengths are the same), and in
  particular all edge lengths should be 1mm.

.. apparently this criterion is stricter
   * voxels are between 0.5-1.0 mm along an edge (note that for voxels
     <0.75 mm along an edge, one might have to use special ``-hires``
     option in ``recon-all``; please consult FS help pages for more
     detail).

This list of properties might change over time, as either the FS
software changes or more requisite properties are determined by
experience.  Note that for voxels with edge length <=0.75mm, there is
a special ``-hires`` option flag in ``recon-all``; at present, we
don't know if the above properties apply in this case (particularly
the voxel isotropicity), so please consult FS help pages for more
detail in such cases.

What happens if one or more of the above properties are not met?  Here
we display several examples in movie form: each panel alternates
continuously between the T1w dset input to ``recon-all`` and its
output "SurfVol" (or "brain") dataset:

#:IMAGE:  Case 1, "good": mat=EEE, vox=iso (1mm)  || Case 2, "bad": mat=EEO, vox=iso (1mm)
    movie_anat_01_eee_iso1.gif movie_anat_02_eeo_iso1.gif
#:IMCAPTION: Images alternating between input/output of ``recon-all``
for various dset properties.  Descriptions are given as follows: each
of the 3 matrix (mat) dimensions can be even (E) or odd (O); voxels
(vox) can be isotropic (iso) or anisotropic (aniso), and be of various sizes.

|

#:IMAGE:  Case 3, "bad": mat=EEE, vox=aniso (1x0.94x0.94mm)  || Case 4, "bad": mat=EEO, vox=aniso (1x0.94x0.94mm)
    movie_anat_03_eee_aniso.gif movie_anat_00_eeo_aniso.gif

|

#:IMAGE:  Case 5, "bad": mat=EEE, vox=iso (0.90mm)  || Case 6, "bad": mat=OOE, vox=iso (1mm)
    movie_anat_06_eee_iso09.gif movie_anat_13_ooe_iso1.gif

Our initial expectation would be that all of the inputs above would
yield the same output---particularly for something like
adding/removing a row of zeros at the edge of a large matrix of
data---perhaps with simple blurring differences from regridding.
However, empirically, we can see that this is not so.  In the cases
2-6 above, the differences go beyond mere smoothing to nontrivial (and
often inhomogenous) structural changes.

TEXTBLOCK

#:SECTION: Description: AFNI's check_dset_for_fs.py

cat <<TEXTBLOCK

There is now a program in AFNI to check the properties of an
anatomical before running FS, called ``check_dset_for_fs.py``.  It can
also be used to adjust/fix the dataset properties in preparation for
running ``recon-all``.  (We are not aware of any program in any other
software for checking+fixing the data for this.)

.. note:: If your input T1w volumes properties are very far from being
          FreeSurfer-able (e.g., voxel sizes are 1x1x5mm), then the
          suggested fix might not be so useful.  These programs cannot
          perform miracles!

At its simplest, ``check_dset_for_fs.py`` outputs a simple text output
to the screen, stating whether input T1w passes all tests (``1``) or
fails any single test (``0``).  This is useful for scripting
(capturing the output in a variable for evaluating in a conditional),
but not very informative.  

One can also add the ``-verb`` option to see a complete summary of the
input properties, the test thresholds (which can be controlled through
additional options) and the results of individual tests.

Finally, one can instruct the program to output a new dataset with
fixed properties.

Below we provide basic examples of integrating this program into your
analyses with ``recon-all``.  The dataset referred to here is part of
the AFNI Bootcamp data: ``AFNI_data6/FT_analysis/FT/FT_anat+orig.*``
("FT" is a random, two-letter ID for the subject: old school
encoding.)


TEXTBLOCK


#:SECTION: Running check_dset_for_fs.py

cat << TEXTBLOCK

The ``check_dset_for_fs.py`` program can be run quite simply to ask if
a dset is OK to be run with FS's ``recon-all``:

TEXTBLOCK

# Simple check
check_dset_for_fs.py -input FT_anat+orig.HEAD

cat << TEXTBLOCK

The output here is a simple 1 (="yes") or 0 (="no"), which is a useful
format for scripting purposes.

For more information about *how* it might passing/failing, one can ask
for more verbose output.  By default, this text would just be
displayed in the terminal, but we can also redirect it to a file with
">" for later usage:

TEXTBLOCK

# Verbose check. Redirect the text output to a file 
check_dset_for_fs.py -input FT_anat+orig.HEAD -verb > check_fs_prep.txt

cat << TEXTBLOCK

We can quickly take a look at the text file output (e.g. with ``cat
check_fsprep.txt``):

#:INCLUDE: check_fsprep.txt
    :language: none

The top section shows some of the dataset info, and the second section
displays parameters of testing.  The third section shows test-by-test
and overall results (again, 1="yes" or "True", and 0="no" or "False").
Note that by default, all tests are run and their results combined to
make the final evaluation, but one can alternatively specify running
only a subset of tests.

.. note:: Checking voxel size depends on comparing floating point
          numbers, so there is necessarily a "tolerance" value
          involved.  That is, we can't ask, "Are the voxel dimensions
          *exactly* the same?" but instead ask, "Are the differences
          in voxel dimensions smaller than a specific *epsilon*?"  The
          program has default tolerance values for each voxelsize
          comparison (set fairly arbitrarily), but the users can
          adjust these as they see fit.

.. note:: Yes, the voxel min and max values are identical; we test
          them separately in this manner because it is possible some
          day that a range of isotropic voxel sizes will be
          permissible.

Finally, one can ask the program not just to *tell* you about the
dataset, but to take action and *fix* it.  This is accomplished with
the ``-fix_all`` option flag (and providing an output name for the
new+improved dataset):

TEXTBLOCK

# Verbose check AND fix the dset
check_dset_for_fs.py                       \
    -input           FT_anat+orig          \
    -fix_all                               \
    -fix_out_prefix  FT_anat_fsprep.nii.gz \
    -verb            > check_fix_fsprep.txt

cat << TEXTBLOCK

The output text file here includes another section, describing the
properties of the newly created dataset:

#:INCLUDE: check_fix_fsprep.txt
    :language: none

In cases where the input dataset is already fine to use in FS, the new
volume will *still* be created, in order to ease scripting.  The new
dataset would just be a copy of the input.

TEXTBLOCK


#:SECTION: How does check_dset_for_fs.py fix the data?

cat << TEXTBLOCK

When a dataset needs to be fixed, ``check_dset_for_fs.py`` basically
uses one or both of the following programs under the hood:

* ``3dAllineate``: make isotropic voxels at specified (1 mm) resolution

* ``3dZeropad``: make even numbers of voxels in each dimension

Here is an example of resampling to isotropic voxel size, using the
"wsinc5" interpolant to resample with minimal smoothing:

TEXTBLOCK

set pref       = FT_anat
set input_dset = ${pref}+orig
set pref       = ${pref}

3dAllineate                             \
    -1Dmatrix_apply  IDENTITY           \
    -mast_dxyz       1                  \
    -final           wsinc5             \
    -source          ${input_dset}      \
    -prefix          ${pref}_ISO.nii

cat << TEXTBLOCK

And here is an example of zeropadding the dataset to have matrix
dimensions that are all even:

TEXTBLOCK

3dZeropad                               \
    -pad2evens                          \
    -prefix          ${pref}_ZP.nii  \
    ${input_dset}

cat << TEXTBLOCK

TEXTBLOCK

#:SECTION: Start-to-finish FS example

cat << TEXTBLOCK

This a compact example of going through the dataset check and running
FS.

First, we run the ``check_dset_for_fs.py`` program to investigate (and
fix, if necessary) the anatomical dset for FreeSurfer use.  In this
case, it turns out that the T1w volume has both non-isotropic voxels
*and* non-even matrix dimensions.  Useful information about the dset
before and after any fixes are saved in a simple text file, as well,
for reference.

After then running ``recon-all``, and the results are brought back to
AFNI/SUMA-land with ``@SUMA_Make_Spec_FS``:

#:INCLUDE: ex_a.tcsh
    :language: tcsh

And that is all.  Note that ``recon-all`` will take a long time to run
(many hours).

TEXTBLOCK

#:SECTION: A note of filenames/paths with FS

cat << TEXTBLOCK

Here we describe how to specify and link together output paths for
running ``recon-all`` and ``@SUMA_Make_Spec_FS``.

By default, FS's ``recon-all`` will put its output directory in a
location specified with a ``$SUBJECTS_DIR`` environment variable
created at setup (on my computer, ``echo $SUBJECTS_DIR`` produced
``/usr/local/freesurfer/subjects``).  I prefer to specify my own
path/location, and hence use the ``-sd ..`` option.  

If ``recon-all`` is called with options ``-sd AAA`` and ``-subjid
BBB``, then the path to the top of the output directory will be
``AAA/BBB/``.  To bring the FS output into AFNI/SUMA-land, we could
call ``@SUMA_Make_Spec_FS`` with ``-fspath AAA/BBB``.  After this, all
our outputs of interest are likely in the ``AAA/BBB/SUMA`` directory.

Often, we might then re-use the value of the subject ID argument
``-subjid ..`` from ``recon-all`` in ``@SUMA_Make_Spec_FS``'s ``-sid
..``; this is mainly used for some file names in the ``SUMA/`` output
directory.

These conventionalities were used in the above start-to-finish
example.  But since we get paid by the word, we thought we would
describe such things in more explicit detail here.


TEXTBLOCK

#:SECTION: A note on @SUMA_Make_Spec_FS outputs

cat << TEXTBLOCK


The ``SUMA/`` directory contains volumetric outputs of segmentations
and parcellations, surfaces of various sizes and geometry, and more.
Several of these data sets are direct copies of FS output, but in
NIFTI and other formats usable by AFNI.  Others are derived datasets
that we have found to be useful, such as groupings of parcellated ROIs
by tissue types.  Some of the content of the directory is:

* **aparc+aseg_REN_\*.nii.gz**
    A family of volumetric datasets from the "2000" atlas parcellation
    used by FS.  These have been renumbered from the original FS
    lookup-table values for colorbar convenience in AFNI; the
    enumeration will still be consistent across subjects, and the same
    string labels are attached in a labletable (i.e., the same number
    and label goes with a given ROI, across all subjects).  For
    convenience, subsets of ROIs grouped by tissue or type have also
    been created (see the output of ``@SUMA_renumber_FS`` for more
    details on these).

    Recently, the ``*_REN_gmrois.nii.gz`` dset has been added, as a
    subset of the GM ROIs defined by FS.  This dataset contains the
    ROI-like regions of GM from the parcellation, and might be
    particularly useful for tractography or network correlation.

* **aparc.a2009s+aseg_REN_\*.nii.gz**
    A family of volumetric datasets from the "2009" atlas parcellation
    used by FS.  The same renumbering and grouping, as described in
    for the "2000" atlas above, applies.

* **fs_ap_wm.nii.gz**, **fs_ap_latvent.nii.gz**
    Two volumetric datasets of masks that have been found useful for
    ``afni_proc.py`` scripting, namely when applying tissue-based
    regressors.  The first is comprised of the main WM regions defined
    by FS, and the second is comprised of the lateral ventricles 
    
    For more details, see the output of ``@SUMA_renumber_FS`` for more
    details on these.

    

TEXTBLOCK
