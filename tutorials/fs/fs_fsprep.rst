

.. _tut_fs_fsprep:

***********
Using imcat
***********


.. contents:: :local:

Introduction
============

**Download script:** :download:`fs_fsprep.tcsh <media/fs_fsprep/fs_fsprep.tcsh>`


FreeSurfer (FS) provides a number of useful tools for brain imaging.
In particular, the parcellation/segmentations and anatomical surfaces
generated by ``recon-all`` can be used in lots of applications.

Here we describe a few considerations for preparing to use FS (in
particular, ``recon-all``) and bringing the results into AFNI- and
SUMA-land with ``@SUMA_Make_Spec_FS``.  Some of these items might even
inform your acquisition paradigms for anatomical volumes.

These considerations are borne out of experience in processing the
datasets and into integrating them into the AFNI/SUMA flow.  This is
not a FS help page---all queries about using those tools should go to
their authors.  Here, we have been using FS ver 6.0.0.



Input T1w dataset properties
==============================

There are a number of properties that the T1w volume input to FS's
``recon-all`` should have to ensure that the output datasets and
surfaces align well with the input volume.  To date, these include:

* having a FOV matrix with even numbers of voxels in each direction
  (e.g., 256x256x174 matrix, not a 256x256x173 one).

* having isotropic voxels (voxel edge lengths are the same)

* voxels are between 0.5-1.0 mm along an edge (note that for voxels
  <0.75 mm along an edge, one might have to use special ``-hires``
  option in ``recon-all``; please consult FS help pages for more
  detail).

This list of properties might change over time, as either the software
changes or more properties are determined.

There is now a program in AFNI to check these things, called
``check_dset_for_fs.py``.  Its help also provides suggestions for
trying to fix any of those issues in your anatomical datasets,
primarily through zero-padding slices and resampling the data.

.. note:: If your input T1w volumes properties are very far from being
          FreeSurfer-able (e.g., voxel sizes are 1x1x5 mm), then the
          suggested fix might not work.  These programs cannot perform
          miracles!

By default, ``check_dset_for_fs.py`` outputs only a simple text output
to the screen, stating whether input T1w passes all tests (``1``) or
fails any single test (``0``).  This is useful for scripting
(capturing the output in a variable for evaluating in a conditional),
but not very informative.  One can also add the ``-verb`` option to
see a complete breakdown of the input properties, test thresholds
(which can be controlled through additional options) and results of
individual tests.

Below we provide a basic example for testing a T1w dset for
FS-ability.  The dataset referred to here is part of the AFNI Bootcamp
data: ``AFNI_data6/FT_analysis/FT/FT_anat+orig.*`` ("FT" is a random,
two-letter ID for the subject: old school encoding.)



.. code-block:: Tcsh

   #!/bin/tcsh
   
   # Input T1w anatomical volume
   set anat_orig = FT_anat+orig.HEAD
   
   # "Verbose" mode of checking all properties: for detailed output.
   # Dump output to a file...
   check_dset_for_fs.py -input ${anat_orig} -verb > check_fs.txt
   # ... and display it
   \cat check_fs.txt
   
   

We can quickly take a look at the text file output:


.. literalinclude:: media/fs_fsprep/check_fs.txt

The top part shows some of the dataset info and the parameters of
testing, as well as the test-by-test results.  Note that by default,
all tests are run and put into the final evaluation (but one can
specify sub-tests).

.. note:: Checking voxel size depends on comparing floating point
          numbers, so there is necessarily a "tolerance" value
          involved.  That is, we can't ask, "Are the voxel dimensions
          *exactly* the same?" but instead ask, "Are the differences
          in voxel dimensions smaller than *epsilon*?"  The program
          has default values of epsilon for each voxelsize comparison
          (set fairly arbitrarily), but the users can adjust these as
          they see fit.




.. code-block:: Tcsh

   # "Scripty" mode of checking all properties: single-number output
   # stored in variable
   set fs_check = `check_dset_for_fs.py -input ${anat_orig}`
   
   # Check the output
   if ( $fs_check ) then
       # Dset passes check
       echo "++ Good to go with FreeSurfer"
       set anat_for_fs = ${anat_orig}
   else
       # Dset fails check
       echo "** Shouldn't do FreeSurfer on this dset"
       echo "   Will check among properties for what has gone wrong and"
       echo "   fix each badness appropriately (hopefully)"
   
       # get the prefix for naming
       set pref = `3dinfo -prefix_noext ${anat_orig}`
   
       # Sub-check of voxelsize properties: do we need to resample?
       set input_dset   = ${anat_orig} 
       set fs_check_vox = `check_dset_for_fs.py -input ${input_dset}     \
                               -is_vox_05mm_min -is_vox_1mm_max -is_vox_iso`
   
       # use results of voxelsize check to resample, if necessary
       if ( $fs_check_vox ) then
           3dAllineate                                                   \
               -1Dmatrix_apply  IDENTITY                                 \
               -mast_dxyz       1                                        \
               -final           wsinc5                                   \
               -source          ${input_dset}                            \
               -prefix          ${pref}_00_ISO.nii
   
           # pass along this dset as the new "input" dset for next step
           set input_dset = ${pref}_00_ISO.nii
       endif
   
       # use results of matrix check zeropad, if necessary
       set fs_check_mat = `check_dset_for_fs.py -input ${input_dset}     \
                               -is_mat_even`
   
       # use results of matrix check zeropad, if necessary
       if ( $fs_check_mat ) then
           3dZeropad                                                     \
               -pad2evens                                                \
               -prefix          ${pref}_01_ZP.nii                        \
               ${input_dset}
   
           # pass along this dset as the new "input" dset for next step
           set input_dset = ${pref}_01_ZP.nii
       endif
   
       set anat_for_fs = ${input_dset}
   endif
   

After this check, we should now have an appropriate dset for FS's
recon-all stored in the variable ``${anat_for_fs}.`` We could re-run
``check_dset_for_fs.py`` on it to be sure!

Note also that we don't know how badly the initial dset failed its
tests for FS-ability.  The output could still be inappropriate for
running ``recon-all`` due to having weird voxel sizes, partial
coverage, noise/artifact, etc.  As we always seem to do in AFNI, I
would **strongly encourage you to look at your data**.  

One way to look at the data could be with ``@chauffeur_afni``:



.. code-block:: Tcsh

   @chauffeur_afni                                                       \
       -ulay    ${anat_for_fs}                                           \
       -olay_off                                                         \
       -prefix  ${pref}_image                                            \
       -montx 7 -monty 1                                                 \
       -blowup 4                                                         \
       -set_xhairs OFF                                                   \
       -label_mode 1 -label_size 3                                       \
       -do_clean
   

There, that wasn't so bad, was it?  Here are your images:


.. list-table:: 
   :header-rows: 1
   :widths: 100 

   * - Axial, sagittal and coronal montages of the T1w dset
   * - .. image:: media/fs_fsprep/FT_anat_image.axi.png
          :width: 100%   
          :align: center
   * - .. image:: media/fs_fsprep/FT_anat_image.sag.png
          :width: 100%   
          :align: center
   * - .. image:: media/fs_fsprep/FT_anat_image.cor.png
          :width: 100%   
          :align: center

|

Running FS's recon-all
========================

Now that the dataset has been checked and fixed with
``check_dset_for_fs.py`` (and then checked again with images output by
``@chauffeur_afni``), we can proceed to run FS's ``recon-all``
command.  This command will estimate cortical
parcellation/segmentation maps, as well as surface messages.  

The FS outputs can then be translated into standardized meshes and
NIFTI volume output for use in AFNI+SUMA with ``@SUMA_Make_Spec_FS``,
which will also make some other convenient dsets derived from the FS
output.  These will be described below.



.. code-block:: Tcsh

   echo "++ Ready to start FS"
   
   # NB: this command will take a long time-- typically somewhere between
   # 10-20 hours for a standard anatomical brain.
   recon-all                                                             \
       -all                                                              \
       -sd       ./                                                      \
       -subjid   FT                                                      \
       -i        ${anat_for_fs}
   

The main thing to note is the directory structure of outputs: in the
present case, ``recon-all`` will make a new directory called ``./FT/``
and populate it with lots of subdirectories of data ("label", "mri",
"scripts", etc.).  More generally, if ``recon-all`` is called with
options ``-sd SD_ARG`` and ``-subjid SUBJID_ARG``, then the path to
the top of the output directory will be ``SD_ARG/SUBJID_ARG/``.

The above command will run for a long while.

Running AFNI's @SUMA_Make_Spec_FS
===================================


When ``recon-all`` has finished, we can take that FS output and bring
it into formats usable by AFNI and SUMA, such as NIFTI and GIFTI
files.  This is all done with a single AFNI command
``@SUMA_Make_Spec_FS``.

Basically, one just has to provide the program with: a subject ID
(sid) and the path to the top of the FS output; we also generally
recommend using the ``-NIFTI`` option, for nicer format dsets of the
surfaces.  Putting this all together, we have the following command:



.. code-block:: Tcsh

   # Convert FS recon-all output to AFNI/SUMA formats
   @SUMA_Make_Spec_FS                                                    \
       -NIFTI                                                            \
       -sid     FT                                                       \
       -fspath  ./FT
   

Note that "FT" appears twice in different roles here: we are first
specifying it as the subject ID (so that will determine some output
file names), and then it just happens to be part of the path to the FS
output directory.  This is not always the case.  

The main output of running this command is all in a directory that
will here be in ``./FT/SUMA`` (more generally, in a new subdirectory
``SUMA`` that will be wherever the ``-fspath ..`` directory is).
There are volumetric outputs of surfaces and parcellations, and more.



